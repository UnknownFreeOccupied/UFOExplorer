#!/usr/bin/env python
PACKAGE = "ufoexplorer"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#           Name                        Type       Level  Description                                                     Default       Min     Max
gen.add("hfov",                         double_t,       1,   "Horizontal FoV",                                            115.0,        0.0,    360.0)
gen.add("vfov",                         double_t,       1,   "Vertical FoV",                                              60.0,         0.0,    360.0)
gen.add("r_min",                        double_t,       1,   "r min",                                                     0.0,          0.0,    100.0)
gen.add("r_max",                        double_t,       1,   "r max",                                                     7.0,          0.0,    100.0)

gen.add("dr",                           double_t,       2,   "dr",                                                        0.1,          0.0,    10.0)
gen.add("dphi",                         double_t,       2,   "dphi",                                                      10.0,         0.0,    360.0)
gen.add("dtheta",                       double_t,       2,   "dtheta",                                                    10.0,         0.0,    360.0)

gen.add("lambda",                       double_t,       3,   "Lambda",                                                    0.5,          0.0,    10.0)
gen.add("zero_gain",                    double_t,       3,   "Zero gain",                                                 2.0,          0.0,    10.0)
gen.add("extension_range",              double_t,       3,   "Extension range",                                           1.0,          0.0,    10.0)
gen.add("max_sampling_radius",          double_t,       3,   "Max sampling radius",                                       30.0,         0.0,    100.0)
gen.add("sigma_thresh",                 double_t,       3,   "Sigma threshold",                                           0.2,          0.0,    10.0)

gen.add("d_overshoot",                  double_t,       4,   "Distance overshoot",                                        0.25,         0.0,    10.0)
gen.add("robot_radius",                 double_t,       4,   "Robot radius",                                              0.7,          0.0,    10.0)
gen.add("robot_height_below",           double_t,       4,   "Robot height below",                                        0.0,          0.0,    10.0)
gen.add("robot_height_above",           double_t,       4,   "Robot height above",                                        0.1,          0.0,    10.0)

gen.add("init_iterations",              int_t,          5,   "Initial number of iterations",                              30,           1,      10000)
gen.add("cutoff_iterations",            int_t,          5,   "Max number of iterations",                                  100,          1,      10000)

gen.add("boundary_min_x",               double_t,       6,   "Boundery min x",                                            -30.0,       -1000.0, 1000.0)
gen.add("boundary_min_y",               double_t,       6,   "Boundery min y",                                            -30.0,       -1000.0, 1000.0)
gen.add("boundary_min_z",               double_t,       6,   "Boundery min z",                                            0.0,         -1000.0, 1000.0)
gen.add("boundary_max_x",               double_t,       6,   "Boundery max x",                                            30.0,        -1000.0, 1000.0)
gen.add("boundary_max_y",               double_t,       6,   "Boundery max y",                                            30.0,        -1000.0, 1000.0)
gen.add("boundary_max_z",               double_t,       6,   "Boundery max z",                                            2.5,         -1000.0, 1000.0)

gen.add("robot_frame_id",               str_t,          7,   "Robot frame id",                                            "base_link")
gen.add("map_frame_id",                 str_t,          7,   "Map frame id",                                              "map")

gen.add("min_useful_leaf_gain",         double_t,       7,   "Filter all leaf nodes with less gain",                      0.5,         0.0, 1.0)

gen.add("k_max",                        int_t,          8,   "RR-RRT* k_max",                                            6,         0, 100)
gen.add("r_s",                          double_t,       8,   "RR-RRT* r_s",                                            0.5,         0.0, 10.0)
gen.add("expand_duration",              double_t,       8,   "RR-RRT* expand_duration",                                   0.1,      0, 10)
gen.add("rewire_random_duration",       double_t,       8,   "RR-RRT* rewire_random_duration",                            0.1,      0, 10)
gen.add("rewire_root_duration",         double_t,       8,   "RR-RRT* rewire_root_duration",                              0.1,      0, 10)



gen.add("stl_lambda",                   double_t,       8,   "Lambda for STL",                                            5.0,          0.0,    10.0)
gen.add("min_distance",                 double_t,       8,   "Min distance for STL",                                      1.0,          0,      20.0)
gen.add("max_distance",                 double_t,       8,   "Max distance for STL",                                      4.0,          0,      20.0)
gen.add("min_distance_active",          bool_t,         8,   "True if min distance for STL is active",                    False)
gen.add("max_distance_active",          bool_t,         8,   "True if max distance for STL is active",                    False)
gen.add("routers_active",               bool_t,         8,   "True if routers for STL is active",                         False)
gen.add("step_size",                    double_t,       8,   "Step size for STL",                                         0.1,          0,      10.0)

exit(gen.generate(PACKAGE, "ufoexplorer", "UFOExplorer"))
